name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm version detection
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build setuptools-scm
    
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Build wheel distributions
      run: python -m build --wheel
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Build wheels for multiple platforms per PEP 656
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]  # macos-14 is Apple Silicon
        
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        # Build wheels for Python 3.9+ (Python 3.8 support removed)
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
        # Skip 32-bit builds and PyPy for simplicity
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"
        # Install test dependencies and run tests
        CIBW_TEST_EXTRAS: test
        CIBW_TEST_COMMAND: pytest {project}/tests -x -vs -m "not integration"
        # Ensure auditwheel/delocate can find all dependencies
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
        
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  publish-to-pypi:
    name: Publish to PyPI ðŸš€
    if: startsWith(github.ref, 'refs/tags/')  # Only publish on tag push
    needs:
    - build
    - build-wheels
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/navien-nwp500
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish to TestPyPI ðŸ§ª
    if: github.event.inputs.publish_to_testpypi == 'true' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/'))
    needs:
    - build
    - build-wheels
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/navien-nwp500
    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  github-release:
    name: Create GitHub Release ðŸ“‹
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'