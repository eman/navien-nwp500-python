name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For PyPI trusted publishing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Run linting
      run: |
        black --check .
        isort --check-only .
    
    - name: Type check
      run: |
        mypy navien_nwp500 || true  # Allow to pass for now

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  github-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: NaviLink v${{ steps.version.outputs.VERSION }}
        body: |
          # NaviLink v${{ steps.version.outputs.VERSION }} - Production Ready
          
          ## 🎉 What's New
          
          This release brings production-ready monitoring and control for Navien NWP500 Heat Pump Water Heaters via the NaviLink service.
          
          ### ✨ Key Features
          - **Real-time Tank Monitoring**: Track DHW charge levels, temperatures, and heat pump operation
          - **Device Control**: Adjust temperature settings, operation modes, and power state
          - **Production Examples**: Ready-to-use monitoring scripts with CSV export
          - **HAR-Validated Parsers**: Thoroughly tested against real API responses
          - **Enterprise Configuration**: Secure .env-based credential management
          
          ### 🔧 Installation
          ```bash
          pip install navien-nwp500
          ```
          
          ### 📖 Quick Start
          ```python
          from navien_nwp500 import NaviLinkClient, NaviLinkConfig
          
          config = NaviLinkConfig.from_environment()
          client = NaviLinkClient(config=config)
          
          # Your NaviLink credentials in .env file
          await client.authenticate(config.email, config.password)
          devices = await client.get_devices()
          device = devices[0]
          
          # Get current status
          status = await device.get_status()
          print(f"Tank: {status.dhw_charge_per}% | Temp: {status.dhw_temperature}°F")
          ```
          
          ### 📊 Monitoring
          ```bash
          # Production tank monitoring
          python -m navien_nwp500.examples.tank_monitoring_production
          ```
          
          ### 🏗️ Supported Hardware
          - Navien NWP500 Heat Pump Water Heater (validated)
          - NaviLink smart control service
          
          ### 📚 Documentation
          - [README.md](https://github.com/eman/navien-nwp500-python/blob/main/README.md)
          - [API Documentation](https://github.com/eman/navien-nwp500-python/blob/main/docs/)
          - [Examples](https://github.com/eman/navien-nwp500-python/tree/main/examples)
          
          ## 🐛 Bug Reports & 💡 Feature Requests
          Please use the [GitHub Issues](https://github.com/eman/navien-nwp500-python/issues) page.
          
          **Full Changelog**: [v${{ steps.version.outputs.VERSION }}](https://github.com/eman/navien-nwp500-python/blob/main/CHANGELOG.md)
        draft: false
        prerelease: false
        artifacts: "dist/*"
        token: ${{ secrets.GITHUB_TOKEN }}

  pypi-publish:
    needs: [build, github-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/navien-nwp500
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true