name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce matrix size for efficiency while maintaining PEP 656 compliance
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
          
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 navien_nwp500 --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=navien_nwp500/_version.py
        # Exit-zero treats all errors as warnings. Line length is handled by black
        flake8 navien_nwp500 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=navien_nwp500/_version.py

    - name: Format check with black
      run: |
        black --check . --exclude="_version\.py"

    - name: Import sort check with isort
      run: |
        # Check all files except _version.py using find/exclude approach
        isort --check-only --diff navien_nwp500 tests --extend-skip=navien_nwp500/_version.py

    - name: Type check with mypy
      run: |
        mypy navien_nwp500
      continue-on-error: true  # MyPy can be strict, don't fail CI initially

    - name: Test with pytest
      run: |
        # Run all tests in tests/ directory
        pytest tests/ -v --cov=navien_nwp500 --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run integration tests
      run: |
        pytest tests/ -v -m integration --tb=short
      env:
        # These would be set as repository secrets for real integration tests
        NAVILINK_EMAIL: ${{ secrets.NAVILINK_EMAIL }}
        NAVILINK_PASSWORD: ${{ secrets.NAVILINK_PASSWORD }}
      continue-on-error: true  # Integration tests may fail due to external dependencies